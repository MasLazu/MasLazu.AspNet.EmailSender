name: Publish to NuGet

on:
  release:
    types: [published, prereleased]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to publish'
        required: true
        default: '1.0.0'

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'

jobs:
  publish:
    name: Publish NuGet Packages
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Get version from release or input
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          # Remove 'v' prefix from tag name
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Pack Abstraction package
      run: |
        cd src/MasLazu.AspNet.EmailSender.Abstraction
        dotnet pack --configuration ${{ env.CONFIGURATION }} --no-build --output ${{ github.workspace }}/nupkgs /p:PackageVersion=${{ steps.get-version.outputs.version }}

    - name: Pack Gmail package
      run: |
        cd src/MasLazu.AspNet.EmailSender.Gmail
        dotnet pack --configuration ${{ env.CONFIGURATION }} --no-build --output ${{ github.workspace }}/nupkgs /p:PackageVersion=${{ steps.get-version.outputs.version }}

    - name: Pack SendGrid package
      run: |
        cd src/MasLazu.AspNet.EmailSender.SendGrid
        dotnet pack --configuration ${{ env.CONFIGURATION }} --no-build --output ${{ github.workspace }}/nupkgs /p:PackageVersion=${{ steps.get-version.outputs.version }}

    - name: List created packages
      run: ls -la ${{ github.workspace }}/nupkgs/

    - name: Publish Abstraction package to NuGet
      run: dotnet nuget push ${{ github.workspace }}/nupkgs/MasLazu.AspNet.EmailSender.Abstraction.${{ steps.get-version.outputs.version }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Publish Gmail package to NuGet
      run: dotnet nuget push ${{ github.workspace }}/nupkgs/MasLazu.AspNet.EmailSender.Gmail.${{ steps.get-version.outputs.version }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Publish SendGrid package to NuGet
      run: dotnet nuget push ${{ github.workspace }}/nupkgs/MasLazu.AspNet.EmailSender.SendGrid.${{ steps.get-version.outputs.version }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Create GitHub release notes
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.get-version.outputs.version }}';
          const packages = [
            'MasLazu.AspNet.EmailSender.Abstraction',
            'MasLazu.AspNet.EmailSender.Gmail',
            'MasLazu.AspNet.EmailSender.SendGrid'
          ];

          let body = `## ðŸš€ Release ${version}\n\n`;
          body += '### ðŸ“¦ Published Packages\n\n';
          packages.forEach(pkg => {
            body += `- \`${pkg}\` v${version}\n`;
          });
          body += '\n### ðŸ”— Installation\n\n';
          body += '```bash\n';
          packages.forEach(pkg => {
            body += `dotnet add package ${pkg} --version ${version}\n`;
          });
          body += '```\n\n';
          body += '### ðŸ“‹ Changes\n\n';
          body += 'See the changelog for details about this release.\n\n';
          body += '---\n\n';
          body += '*This release was automatically published by GitHub Actions.*';

          github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${version}`,
            name: `Release ${version}`,
            body: body,
            draft: false,
            prerelease: version.includes('beta') || version.includes('alpha') || version.includes('rc') || version.includes('preview')
          });
